{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sftp-workspace3"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=leonsv.database.windows.net;Initial Catalog=leondb"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"AzureSynapseAnalytics2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics2'"
		},
		"AzureSynapseAnalytics3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics3'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=sftp-workspace3.sql.azuresynapse.net;Initial Catalog=test100c"
		},
		"CCADLS2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'CCADLS2'"
		},
		"DWsynapse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWsynapse'"
		},
		"Leondb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Leondb'"
		},
		"Sftp1_privateKeyContent": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyContent' of 'Sftp1'"
		},
		"Sftp1_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'Sftp1'"
		},
		"Sftp2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp2'"
		},
		"Sftp3123_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp3123'"
		},
		"Sftp31242_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp31242'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"SqlServer2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer2'"
		},
		"ccblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ccblob'"
		},
		"lb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lb'"
		},
		"leonworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'leonworkspace-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:leonworkspace.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"sftp-workspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sftp-workspace-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:sftp-workspace.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"sftp-workspace3-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sftp-workspace3-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:sftp-workspace3.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"testpoilcy_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'testpoilcy'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net/"
		},
		"CCADLS2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net/"
		},
		"Sftp1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "10.0.0.12"
		},
		"Sftp1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"Sftp2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "lb.sftp.com"
		},
		"Sftp2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sftp_user"
		},
		"Sftp3123_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "lb.sftp.com"
		},
		"Sftp3123_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "test"
		},
		"Sftp31242_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "server2.sftp.com"
		},
		"Sftp31242_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "test"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"dlsccbji0001_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net/"
		},
		"lb_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "loadbalancer.sftp.com"
		},
		"lb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sftp_user"
		},
		"leonworkspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net"
		},
		"sftp-workspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net"
		},
		"sftp-workspace3-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leonly.dfs.core.windows.net"
		},
		"Trigger 7_properties_Pipeline 5_parameters_SubscriptionId": {
			"type": "string",
			"defaultValue": "750575ff-ab82-4fa7-9a62-b7052fd86473"
		},
		"Trigger 7_properties_Pipeline 5_parameters_ResourceGroupName": {
			"type": "string",
			"defaultValue": "test-sftp_group"
		},
		"Trigger 7_properties_Pipeline 5_parameters_Region": {
			"type": "string",
			"defaultValue": "Japan East"
		},
		"Trigger 7_properties_Pipeline 5_parameters_ServerName": {
			"type": "string",
			"defaultValue": "sftp-workspace3"
		},
		"Trigger 7_properties_Pipeline 5_parameters_DatabaseName": {
			"type": "string",
			"defaultValue": "test100c"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/DedicatedSqlPools_OnOff')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web_PostDedicatedSqlPool",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "If_isOn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n'https://management.azure.com/subscriptions/'\n,pipeline().parameters.SubscriptionID\n,'/resourceGroups/'\n,pipeline().parameters.ResourceGroup\n,'/providers/Microsoft.Synapse/workspaces/'\n,pipeline().parameters.WorkspaceName\n,'/sqlPools/'\n,pipeline().parameters.DatabaseName\n,'/'\n,variables('State')\n,'?api-version=2019-06-01-preview'\n)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": "hoge",
							"turnOffAsync": false,
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "If_isOn",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.IsOn",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set_StatePause",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "State",
										"value": "pause"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set_StateResume",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "State",
										"value": "resume"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IsOn": {
						"type": "bool",
						"defaultValue": true
					},
					"SubscriptionID": {
						"type": "string",
						"defaultValue": "750575ff-ab82-4fa7-9a62-b7052fd86473"
					},
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "test-sftp_group"
					},
					"WorkspaceName": {
						"type": "string",
						"defaultValue": "sftp-workspace3"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "tst"
					}
				},
				"variables": {
					"State": {
						"type": "String"
					}
				},
				"folder": {
					"name": "UtilityPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-12T07:51:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "processed"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-31T02:48:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "container"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-05T00:39:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow3_copy4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "test-system/synapse"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-05T04:50:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow3_copy4')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 5')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Resume or Pause Azure Synapse Analytics SQL Pool that has been created in Azure Synapse Analytics Workspaces. Created by https://techtalkcorner.com.",
				"activities": [
					{
						"name": "Check Azure Synapse Analytics Status",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionId,'/resourceGroups/',pipeline().parameters.ResourceGroupName,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.ServerName,'/sqlPools/',pipeline().parameters.DatabaseName,'?api-version=2019-06-01-preview')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "Resume or Pause",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Azure Synapse Analytics Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(and(equals(activity('Check Azure Synapse Analytics Status').output.properties.status,'Online'), equals(pipeline().parameters.Command,'Pause')),and(equals(activity('Check Azure Synapse Analytics Status').output.properties.status,'Paused'), equals(pipeline().parameters.Command,'Resume')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Resume or Pause Azure Synapse Analytics",
									"description": "Pause Azure Synapse Analytics created in Azure Synapse Analytics Workspaces using REST APIs",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Azure Synapse Analytics",
											"value": "Resume or Pause"
										}
									],
									"typeProperties": {
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionId,'/resourceGroups/',pipeline().parameters.ResourceGroupName,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.ServerName,'/sqlPools/',pipeline().parameters.DatabaseName,'/',pipeline().parameters.Command,'?api-version=2019-06-01-preview')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string"
					},
					"ResourceGroupName": {
						"type": "string"
					},
					"Region": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"Command": {
						"type": "string",
						"defaultValue": "Pause"
					}
				},
				"folder": {
					"name": "Manage"
				},
				"annotations": [
					"Synapse Analytics"
				],
				"lastPublishTime": "2022-10-19T09:07:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_resume_or_pause_synapse_analytics_sql_pool')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Resume or Pause Azure Synapse Analytics SQL Pool that has been created in Azure Synapse Analytics Workspaces. Created by https://techtalkcorner.com.",
				"activities": [
					{
						"name": "Check Azure Synapse Analytics Status",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionId,'/resourceGroups/',pipeline().parameters.ResourceGroupName,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.ServerName,'/sqlPools/',pipeline().parameters.DatabaseName,'?api-version=2019-06-01-preview')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "Resume or Pause",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Azure Synapse Analytics Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(and(equals(activity('Check Azure Synapse Analytics Status').output.properties.status,'Online'), equals(pipeline().parameters.Command,'Pause')),and(equals(activity('Check Azure Synapse Analytics Status').output.properties.status,'Paused'), equals(pipeline().parameters.Command,'Resume')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Resume or Pause Azure Synapse Analytics",
									"description": "Pause Azure Synapse Analytics created in Azure Synapse Analytics Workspaces using REST APIs",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Azure Synapse Analytics",
											"value": "Resume or Pause"
										}
									],
									"typeProperties": {
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionId,'/resourceGroups/',pipeline().parameters.ResourceGroupName,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.ServerName,'/sqlPools/',pipeline().parameters.DatabaseName,'/',pipeline().parameters.Command,'?api-version=2019-06-01-preview')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubscriptionId": {
						"type": "string",
						"defaultValue": "1c0dd436-50b8-4d50-9c6d-cb5d07d8db01"
					},
					"ResourceGroupName": {
						"type": "string",
						"defaultValue": "SEA-ADO-EDL-NonProd-01"
					},
					"Region": {
						"type": "string",
						"defaultValue": "Southeast Asia"
					},
					"ServerName": {
						"type": "string",
						"defaultValue": "ngenedlkhsqlpool02"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "ngenedlkhsqlpool02"
					},
					"Command": {
						"type": "string",
						"defaultValue": "Pause"
					}
				},
				"folder": {
					"name": "Manage"
				},
				"annotations": [
					"Synapse Analytics"
				],
				"lastPublishTime": "2022-10-19T09:07:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Leondb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "coviddata"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Leondb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "iso_code",
						"type": "nvarchar"
					},
					{
						"name": "continent",
						"type": "nvarchar"
					},
					{
						"name": "location",
						"type": "nvarchar"
					},
					{
						"name": "date",
						"type": "nvarchar"
					},
					{
						"name": "total_cases",
						"type": "nvarchar"
					},
					{
						"name": "new_cases",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_deaths",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_cases_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "total_deaths_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "reproduction_rate",
						"type": "nvarchar"
					},
					{
						"name": "icu_patients",
						"type": "nvarchar"
					},
					{
						"name": "icu_patients_per_million",
						"type": "nvarchar"
					},
					{
						"name": "hosp_patients",
						"type": "nvarchar"
					},
					{
						"name": "hosp_patients_per_million",
						"type": "nvarchar"
					},
					{
						"name": "weekly_icu_admissions",
						"type": "nvarchar"
					},
					{
						"name": "weekly_icu_admissions_per_million",
						"type": "nvarchar"
					},
					{
						"name": "weekly_hosp_admissions",
						"type": "nvarchar"
					},
					{
						"name": "weekly_hosp_admissions_per_million",
						"type": "nvarchar"
					},
					{
						"name": "total_tests",
						"type": "nvarchar"
					},
					{
						"name": "new_tests",
						"type": "nvarchar"
					},
					{
						"name": "total_tests_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_smoothed_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "positive_rate",
						"type": "nvarchar"
					},
					{
						"name": "tests_per_case",
						"type": "nvarchar"
					},
					{
						"name": "tests_units",
						"type": "nvarchar"
					},
					{
						"name": "total_vaccinations",
						"type": "nvarchar"
					},
					{
						"name": "people_vaccinated",
						"type": "nvarchar"
					},
					{
						"name": "people_fully_vaccinated",
						"type": "nvarchar"
					},
					{
						"name": "total_boosters",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_vaccinations_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "people_vaccinated_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "people_fully_vaccinated_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "total_boosters_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_people_vaccinated_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "new_people_vaccinated_smoothed_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "stringency_index",
						"type": "nvarchar"
					},
					{
						"name": "population",
						"type": "nvarchar"
					},
					{
						"name": "population_density",
						"type": "nvarchar"
					},
					{
						"name": "median_age",
						"type": "nvarchar"
					},
					{
						"name": "aged_65_older",
						"type": "nvarchar"
					},
					{
						"name": "aged_70_older",
						"type": "nvarchar"
					},
					{
						"name": "gdp_per_capita",
						"type": "nvarchar"
					},
					{
						"name": "extreme_poverty",
						"type": "nvarchar"
					},
					{
						"name": "cardiovasc_death_rate",
						"type": "nvarchar"
					},
					{
						"name": "diabetes_prevalence",
						"type": "nvarchar"
					},
					{
						"name": "female_smokers",
						"type": "nvarchar"
					},
					{
						"name": "male_smokers",
						"type": "nvarchar"
					},
					{
						"name": "handwashing_facilities",
						"type": "nvarchar"
					},
					{
						"name": "hospital_beds_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "life_expectancy",
						"type": "nvarchar"
					},
					{
						"name": "human_development_index",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative_absolute",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative_per_million",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "test",
					"table": "coviddata"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "column1",
						"type": "varchar"
					},
					{
						"name": "column2",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "testtable2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "test",
					"table": "coviddata"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "leonworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test.csv",
						"fileSystem": "test-system"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/leonworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "owid-covid-data.csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "testdata.csv",
						"folderPath": "csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText3')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "errordata.csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_3tk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "test",
					"table": "coviddata"
				},
				"sqlPool": {
					"referenceName": "test100c",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/test100c')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_wua')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"table": "owid-covid-data"
				},
				"sqlPool": {
					"referenceName": "test100c",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/test100c')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Json1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "leonworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test",
						"folderPath": "test",
						"fileSystem": "test"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/leonworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Json2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "testlog.json",
						"container": "container"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"LogId": {
							"type": "string"
						},
						"Code": {
							"type": "integer"
						},
						"Name": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_3tk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "owid-covid-data.csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "iso_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "total_cases",
						"type": "String"
					},
					{
						"name": "new_cases",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed",
						"type": "String"
					},
					{
						"name": "total_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed",
						"type": "String"
					},
					{
						"name": "total_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "total_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "reproduction_rate",
						"type": "String"
					},
					{
						"name": "icu_patients",
						"type": "String"
					},
					{
						"name": "icu_patients_per_million",
						"type": "String"
					},
					{
						"name": "hosp_patients",
						"type": "String"
					},
					{
						"name": "hosp_patients_per_million",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions_per_million",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions_per_million",
						"type": "String"
					},
					{
						"name": "total_tests",
						"type": "String"
					},
					{
						"name": "new_tests",
						"type": "String"
					},
					{
						"name": "total_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed_per_thousand",
						"type": "String"
					},
					{
						"name": "positive_rate",
						"type": "String"
					},
					{
						"name": "tests_per_case",
						"type": "String"
					},
					{
						"name": "tests_units",
						"type": "String"
					},
					{
						"name": "total_vaccinations",
						"type": "String"
					},
					{
						"name": "people_vaccinated",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated",
						"type": "String"
					},
					{
						"name": "total_boosters",
						"type": "String"
					},
					{
						"name": "new_vaccinations",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed",
						"type": "String"
					},
					{
						"name": "total_vaccinations_per_hundred",
						"type": "String"
					},
					{
						"name": "people_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "total_boosters_per_hundred",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed_per_hundred",
						"type": "String"
					},
					{
						"name": "stringency_index",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "population_density",
						"type": "String"
					},
					{
						"name": "median_age",
						"type": "String"
					},
					{
						"name": "aged_65_older",
						"type": "String"
					},
					{
						"name": "aged_70_older",
						"type": "String"
					},
					{
						"name": "gdp_per_capita",
						"type": "String"
					},
					{
						"name": "extreme_poverty",
						"type": "String"
					},
					{
						"name": "cardiovasc_death_rate",
						"type": "String"
					},
					{
						"name": "diabetes_prevalence",
						"type": "String"
					},
					{
						"name": "female_smokers",
						"type": "String"
					},
					{
						"name": "male_smokers",
						"type": "String"
					},
					{
						"name": "handwashing_facilities",
						"type": "String"
					},
					{
						"name": "hospital_beds_per_thousand",
						"type": "String"
					},
					{
						"name": "life_expectancy",
						"type": "String"
					},
					{
						"name": "human_development_index",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_absolute",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative",
						"type": "String"
					},
					{
						"name": "excess_mortality",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_per_million",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_4zp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "leonworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/leonworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cvq')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "owid-covid-data.csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "iso_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "total_cases",
						"type": "String"
					},
					{
						"name": "new_cases",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed",
						"type": "String"
					},
					{
						"name": "total_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed",
						"type": "String"
					},
					{
						"name": "total_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "total_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "reproduction_rate",
						"type": "String"
					},
					{
						"name": "icu_patients",
						"type": "String"
					},
					{
						"name": "icu_patients_per_million",
						"type": "String"
					},
					{
						"name": "hosp_patients",
						"type": "String"
					},
					{
						"name": "hosp_patients_per_million",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions_per_million",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions_per_million",
						"type": "String"
					},
					{
						"name": "total_tests",
						"type": "String"
					},
					{
						"name": "new_tests",
						"type": "String"
					},
					{
						"name": "total_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed_per_thousand",
						"type": "String"
					},
					{
						"name": "positive_rate",
						"type": "String"
					},
					{
						"name": "tests_per_case",
						"type": "String"
					},
					{
						"name": "tests_units",
						"type": "String"
					},
					{
						"name": "total_vaccinations",
						"type": "String"
					},
					{
						"name": "people_vaccinated",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated",
						"type": "String"
					},
					{
						"name": "total_boosters",
						"type": "String"
					},
					{
						"name": "new_vaccinations",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed",
						"type": "String"
					},
					{
						"name": "total_vaccinations_per_hundred",
						"type": "String"
					},
					{
						"name": "people_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "total_boosters_per_hundred",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed_per_hundred",
						"type": "String"
					},
					{
						"name": "stringency_index",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "population_density",
						"type": "String"
					},
					{
						"name": "median_age",
						"type": "String"
					},
					{
						"name": "aged_65_older",
						"type": "String"
					},
					{
						"name": "aged_70_older",
						"type": "String"
					},
					{
						"name": "gdp_per_capita",
						"type": "String"
					},
					{
						"name": "extreme_poverty",
						"type": "String"
					},
					{
						"name": "cardiovasc_death_rate",
						"type": "String"
					},
					{
						"name": "diabetes_prevalence",
						"type": "String"
					},
					{
						"name": "female_smokers",
						"type": "String"
					},
					{
						"name": "male_smokers",
						"type": "String"
					},
					{
						"name": "handwashing_facilities",
						"type": "String"
					},
					{
						"name": "hospital_beds_per_thousand",
						"type": "String"
					},
					{
						"name": "life_expectancy",
						"type": "String"
					},
					{
						"name": "human_development_index",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_absolute",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative",
						"type": "String"
					},
					{
						"name": "excess_mortality",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_per_million",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_wua')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "owid-covid-data.csv",
						"container": "container"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "iso_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "total_cases",
						"type": "String"
					},
					{
						"name": "new_cases",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed",
						"type": "String"
					},
					{
						"name": "total_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed",
						"type": "String"
					},
					{
						"name": "total_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_per_million",
						"type": "String"
					},
					{
						"name": "new_cases_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "total_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_per_million",
						"type": "String"
					},
					{
						"name": "new_deaths_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "reproduction_rate",
						"type": "String"
					},
					{
						"name": "icu_patients",
						"type": "String"
					},
					{
						"name": "icu_patients_per_million",
						"type": "String"
					},
					{
						"name": "hosp_patients",
						"type": "String"
					},
					{
						"name": "hosp_patients_per_million",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions",
						"type": "String"
					},
					{
						"name": "weekly_icu_admissions_per_million",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions",
						"type": "String"
					},
					{
						"name": "weekly_hosp_admissions_per_million",
						"type": "String"
					},
					{
						"name": "total_tests",
						"type": "String"
					},
					{
						"name": "new_tests",
						"type": "String"
					},
					{
						"name": "total_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_per_thousand",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed",
						"type": "String"
					},
					{
						"name": "new_tests_smoothed_per_thousand",
						"type": "String"
					},
					{
						"name": "positive_rate",
						"type": "String"
					},
					{
						"name": "tests_per_case",
						"type": "String"
					},
					{
						"name": "tests_units",
						"type": "String"
					},
					{
						"name": "total_vaccinations",
						"type": "String"
					},
					{
						"name": "people_vaccinated",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated",
						"type": "String"
					},
					{
						"name": "total_boosters",
						"type": "String"
					},
					{
						"name": "new_vaccinations",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed",
						"type": "String"
					},
					{
						"name": "total_vaccinations_per_hundred",
						"type": "String"
					},
					{
						"name": "people_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "people_fully_vaccinated_per_hundred",
						"type": "String"
					},
					{
						"name": "total_boosters_per_hundred",
						"type": "String"
					},
					{
						"name": "new_vaccinations_smoothed_per_million",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed",
						"type": "String"
					},
					{
						"name": "new_people_vaccinated_smoothed_per_hundred",
						"type": "String"
					},
					{
						"name": "stringency_index",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "population_density",
						"type": "String"
					},
					{
						"name": "median_age",
						"type": "String"
					},
					{
						"name": "aged_65_older",
						"type": "String"
					},
					{
						"name": "aged_70_older",
						"type": "String"
					},
					{
						"name": "gdp_per_capita",
						"type": "String"
					},
					{
						"name": "extreme_poverty",
						"type": "String"
					},
					{
						"name": "cardiovasc_death_rate",
						"type": "String"
					},
					{
						"name": "diabetes_prevalence",
						"type": "String"
					},
					{
						"name": "female_smokers",
						"type": "String"
					},
					{
						"name": "male_smokers",
						"type": "String"
					},
					{
						"name": "handwashing_facilities",
						"type": "String"
					},
					{
						"name": "hospital_beds_per_thousand",
						"type": "String"
					},
					{
						"name": "life_expectancy",
						"type": "String"
					},
					{
						"name": "human_development_index",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_absolute",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative",
						"type": "String"
					},
					{
						"name": "excess_mortality",
						"type": "String"
					},
					{
						"name": "excess_mortality_cumulative_per_million",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "iso_code",
						"type": "nvarchar"
					},
					{
						"name": "continent",
						"type": "nvarchar"
					},
					{
						"name": "location",
						"type": "nvarchar"
					},
					{
						"name": "date",
						"type": "nvarchar"
					},
					{
						"name": "total_cases",
						"type": "nvarchar"
					},
					{
						"name": "new_cases",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_deaths",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_cases_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_cases_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "total_deaths_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_deaths_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "reproduction_rate",
						"type": "nvarchar"
					},
					{
						"name": "icu_patients",
						"type": "nvarchar"
					},
					{
						"name": "icu_patients_per_million",
						"type": "nvarchar"
					},
					{
						"name": "hosp_patients",
						"type": "nvarchar"
					},
					{
						"name": "hosp_patients_per_million",
						"type": "nvarchar"
					},
					{
						"name": "weekly_icu_admissions",
						"type": "nvarchar"
					},
					{
						"name": "weekly_icu_admissions_per_million",
						"type": "nvarchar"
					},
					{
						"name": "weekly_hosp_admissions",
						"type": "nvarchar"
					},
					{
						"name": "weekly_hosp_admissions_per_million",
						"type": "nvarchar"
					},
					{
						"name": "total_tests",
						"type": "nvarchar"
					},
					{
						"name": "new_tests",
						"type": "nvarchar"
					},
					{
						"name": "total_tests_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "new_tests_smoothed_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "positive_rate",
						"type": "nvarchar"
					},
					{
						"name": "tests_per_case",
						"type": "nvarchar"
					},
					{
						"name": "tests_units",
						"type": "nvarchar"
					},
					{
						"name": "total_vaccinations",
						"type": "nvarchar"
					},
					{
						"name": "people_vaccinated",
						"type": "nvarchar"
					},
					{
						"name": "people_fully_vaccinated",
						"type": "nvarchar"
					},
					{
						"name": "total_boosters",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "total_vaccinations_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "people_vaccinated_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "people_fully_vaccinated_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "total_boosters_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "new_vaccinations_smoothed_per_million",
						"type": "nvarchar"
					},
					{
						"name": "new_people_vaccinated_smoothed",
						"type": "nvarchar"
					},
					{
						"name": "new_people_vaccinated_smoothed_per_hundred",
						"type": "nvarchar"
					},
					{
						"name": "stringency_index",
						"type": "nvarchar"
					},
					{
						"name": "population",
						"type": "nvarchar"
					},
					{
						"name": "population_density",
						"type": "nvarchar"
					},
					{
						"name": "median_age",
						"type": "nvarchar"
					},
					{
						"name": "aged_65_older",
						"type": "nvarchar"
					},
					{
						"name": "aged_70_older",
						"type": "nvarchar"
					},
					{
						"name": "gdp_per_capita",
						"type": "nvarchar"
					},
					{
						"name": "extreme_poverty",
						"type": "nvarchar"
					},
					{
						"name": "cardiovasc_death_rate",
						"type": "nvarchar"
					},
					{
						"name": "diabetes_prevalence",
						"type": "nvarchar"
					},
					{
						"name": "female_smokers",
						"type": "nvarchar"
					},
					{
						"name": "male_smokers",
						"type": "nvarchar"
					},
					{
						"name": "handwashing_facilities",
						"type": "nvarchar"
					},
					{
						"name": "hospital_beds_per_thousand",
						"type": "nvarchar"
					},
					{
						"name": "life_expectancy",
						"type": "nvarchar"
					},
					{
						"name": "human_development_index",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative_absolute",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality",
						"type": "nvarchar"
					},
					{
						"name": "excess_mortality_cumulative_per_million",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "test",
					"table": "coviddata"
				},
				"sqlPool": {
					"referenceName": "test100c",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/test100c')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestSink_Synapse')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "LogId",
						"type": "varchar"
					},
					{
						"name": "Code",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestLog"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestSourceADLS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "container"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"iso_code": {
							"type": "string"
						},
						"continent": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"date": {
							"type": "string"
						},
						"total_cases": {
							"type": "string"
						},
						"new_cases": {
							"type": "string"
						},
						"new_cases_smoothed": {
							"type": "string"
						},
						"total_deaths": {
							"type": "string"
						},
						"new_deaths": {
							"type": "string"
						},
						"new_deaths_smoothed": {
							"type": "string"
						},
						"total_cases_per_million": {
							"type": "string"
						},
						"new_cases_per_million": {
							"type": "string"
						},
						"new_cases_smoothed_per_million": {
							"type": "string"
						},
						"total_deaths_per_million": {
							"type": "string"
						},
						"new_deaths_per_million": {
							"type": "string"
						},
						"new_deaths_smoothed_per_million": {
							"type": "string"
						},
						"reproduction_rate": {
							"type": "string"
						},
						"total_vaccinations": {
							"type": "string"
						},
						"people_vaccinated": {
							"type": "string"
						},
						"people_fully_vaccinated": {
							"type": "string"
						},
						"new_vaccinations_smoothed": {
							"type": "string"
						},
						"total_vaccinations_per_hundred": {
							"type": "string"
						},
						"people_vaccinated_per_hundred": {
							"type": "string"
						},
						"people_fully_vaccinated_per_hundred": {
							"type": "string"
						},
						"new_vaccinations_smoothed_per_million": {
							"type": "string"
						},
						"new_people_vaccinated_smoothed": {
							"type": "string"
						},
						"new_people_vaccinated_smoothed_per_hundred": {
							"type": "string"
						},
						"stringency_index": {
							"type": "string"
						},
						"population": {
							"type": "string"
						},
						"population_density": {
							"type": "string"
						},
						"median_age": {
							"type": "string"
						},
						"aged_65_older": {
							"type": "string"
						},
						"aged_70_older": {
							"type": "string"
						},
						"gdp_per_capita": {
							"type": "string"
						},
						"cardiovasc_death_rate": {
							"type": "string"
						},
						"diabetes_prevalence": {
							"type": "string"
						},
						"handwashing_facilities": {
							"type": "string"
						},
						"hospital_beds_per_thousand": {
							"type": "string"
						},
						"life_expectancy": {
							"type": "string"
						},
						"human_development_index": {
							"type": "string"
						},
						"new_vaccinations": {
							"type": "string"
						},
						"total_tests": {
							"type": "string"
						},
						"total_tests_per_thousand": {
							"type": "string"
						},
						"tests_units": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_excel_without_header')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlsccbji0001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"prm_filesystem": {
						"type": "string",
						"defaultValue": "filesystem"
					},
					"prm_directory": {
						"type": "string",
						"defaultValue": "directory"
					},
					"prm_sheet": {
						"type": "string",
						"defaultValue": "sheet"
					},
					"prm_range": {
						"type": "string",
						"defaultValue": "range"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().prm_sheet",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().prm_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().prm_filesystem",
							"type": "Expression"
						}
					},
					"range": {
						"value": "@dataset().prm_range",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dlsccbji0001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_adls_parquet_fullpath')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlsccbji0001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"prm_filesytem": {
						"type": "string",
						"defaultValue": "filesystem"
					},
					"prm_directory": {
						"type": "string",
						"defaultValue": "directory"
					},
					"prm_file": {
						"type": "string",
						"defaultValue": "file"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().prm_file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().prm_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().prm_filesytem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dlsccbji0001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics3')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics3_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CCADLS2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('CCADLS2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('CCADLS2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DWsynapse')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DWsynapse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Leondb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Leondb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sftp1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp1_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('Sftp1_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "SecureString",
						"value": "[parameters('Sftp1_privateKeyContent')]"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('Sftp1_passPhrase')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sftp2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp2_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp2_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sftp3123')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp3123_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp3123_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp3123_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sftp31242')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp31242_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp31242_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp31242_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ccblob')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ccblob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dlsccbji0001')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ccbji azure data lake storage",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dlsccbji0001_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('lb_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('lb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lb_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/leonworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('leonworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/leonworkspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('leonworkspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sftp-workspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sftp-workspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sftp-workspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sftp-workspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sftp-workspace3-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sftp-workspace3-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sftp-workspace3-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sftp-workspace3-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testpoilcy')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('testpoilcy_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2022-08-05T07:49:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 6')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2022-08-18T12:53:00",
						"endTime": "2022-08-18T13:25:06",
						"timeZone": "Tokyo Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 7')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline 5",
							"type": "PipelineReference"
						},
						"parameters": {
							"SubscriptionId": "[parameters('Trigger 7_properties_Pipeline 5_parameters_SubscriptionId')]",
							"ResourceGroupName": "[parameters('Trigger 7_properties_Pipeline 5_parameters_ResourceGroupName')]",
							"Region": "[parameters('Trigger 7_properties_Pipeline 5_parameters_Region')]",
							"ServerName": "[parameters('Trigger 7_properties_Pipeline 5_parameters_ServerName')]",
							"DatabaseName": "[parameters('Trigger 7_properties_Pipeline 5_parameters_DatabaseName')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Pipeline 2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2022-12-12T00:25:00Z",
						"endTime": "2022-12-13T00:29:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pipeline 5')]",
				"[concat(variables('workspaceId'), '/pipelines/Pipeline 2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Japan East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime3')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime4')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "dlsccbji0001",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('workspaceId'), '/linkedServices/dlsccbji0001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy10')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy12')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy8')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2_copy9')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'container',",
						"     rejectedData_folderPath: 'csv',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy10')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'processed',",
						"     rejectedData_folderPath: 'src_planopos',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column1 = Column_1",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy5')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy7')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy8')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3_copy9')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          column1 as string,",
						"          column2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          column1 = Column_1,",
						"          column2 = Column_2",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText3')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ErrorRowOutputTest_NGSample')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TestSourceADLS",
								"type": "DatasetReference"
							},
							"name": "SourceADLS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestSink_Synapse",
								"type": "DatasetReference"
							},
							"name": "sinkSynapse",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          LogId as string,",
						"          Code as integer,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceADLS",
						"SourceADLS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LogId as string,",
						"          Code as integer,",
						"          Name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'test',",
						"     rejectedData_folderPath: 'ErrorData',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          LogId,",
						"          Code,",
						"          Name",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sinkSynapse"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TestSourceADLS')]",
				"[concat(variables('workspaceId'), '/datasets/TestSink_Synapse')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ErrorRowOutputTest_OKSample')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TestSourceADLS",
								"type": "DatasetReference"
							},
							"name": "SourceADLS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestSink_Synapse",
								"type": "DatasetReference"
							},
							"name": "sinkSynapse",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          LogId as string,",
						"          Code as integer,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceADLS",
						"SourceADLS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LogId as string,",
						"          Code as integer,",
						"          Name as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'test',",
						"     rejectedData_folderPath: 'ErrorData',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          LogId,",
						"          Code,",
						"          Name",
						"     )) ~> sinkSynapse"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TestSourceADLS')]",
				"[concat(variables('workspaceId'), '/datasets/TestSink_Synapse')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Credential1')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/support"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "test scrpit",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER [lyuleon2@microsoft.com] FROM  EXTERNAL PROVIDER;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "test100c",
						"poolName": "test100c"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "copy INTO dbo.testtable FROM 'https://leonly.blob.core.windows.net/container/csv/testdata.csv' WITH (FILE_TYPE='CSV', CREDENTIAL=(IDENTITY='Shared Access Signature', SECRET='?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2022-08-30T15:30:07Z&st=2022-08-30T07:30:07Z&spr=https&sig=YbD12PbE15v04phqSB3bUJ%2BibQUPCQZqbwXJVqOYDFI%3D'))",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "test100c",
						"poolName": "test100c"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "GRANT ADMINISTER DATABASE BULK OPERATIONS TO ['lyuleon@microsoft.com'];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "test100c",
						"poolName": "test100c"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "copy INTO dbo.testtable FROM 'https://leonly.blob.core.windows.net/container/csv/testdata.csv' WITH (FILE_TYPE='CSV', CREDENTIAL=(IDENTITY='Shared Access Signature', SECRET='?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2022-08-30T15:30:07Z&st=2022-08-30T07:30:07Z&spr=https&sig=YbD12PbE15v04phqSB3bUJ%2BibQUPCQZqbwXJVqOYDFI%3D'))",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "test100c",
						"poolName": "test100c"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "29cc42dc-f4ba-45d6-9c10-0bbd260e47f3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Synapse/workspaces/sftp-workspace3/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://sftp-workspace3.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Add required imports\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.functions import col\r\n",
							"\r\n",
							"# Read from existing internal table\r\n",
							"dfToReadFromTable = (spark.read\r\n",
							"\r\n",
							"                     .synapsesql(\"test100c.test.coviddata\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							")\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"dfToReadFromTable.show()"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6506ad34-9cbe-4252-bebe-0f02703a1694"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# TEST"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "31d36e81-1e01-4a8d-9e70-c346653840b0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Synapse/workspaces/sftp-workspace3/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://sftp-workspace3.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Add required imports\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.functions import col\r\n",
							"\r\n",
							"# Read from existing internal table\r\n",
							"dfToReadFromTable = (spark.read\r\n",
							"                     .synapsesql(\"test100c.test.coviddata\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							")\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"dfToReadFromTable.show()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "testspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "09cab5e9-0f83-4327-8d6d-e6d080dd14f0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Synapse/workspaces/sftp-workspace3/bigDataPools/testspark",
						"name": "testspark",
						"type": "Spark",
						"endpoint": "https://sftp-workspace3.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"a = 1\r\n",
							"print(a)"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lakebase')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "lakebase",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://test-system@leonly.dfs.core.windows.net/lakebase",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "sftp-workspace3-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "8e8badda-f08e-4b5f-9849-f76bd652d7d8"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testspark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "japaneast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test100c')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "japaneast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureBlobStorage958')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/leonly",
				"groupId": "blob",
				"fqdns": [
					"leonly.blob.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureSqlDatabase153')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-VPN/providers/Microsoft.Sql/servers/leonsv",
				"groupId": "sqlServer"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureSynapseAnalytics729')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/newgroup/providers/Microsoft.Sql/servers/test-dw-server",
				"groupId": "sqlServer",
				"fqdns": [
					"test-dw-server.database.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/PrivateLinkService356')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Network/privateLinkServices/sftp-link-service",
				"groupId": "",
				"fqdns": [
					"server1.sftp.com",
					"server2.sftp.com"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--sftp-workspace3-leonly')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/leonly",
				"groupId": "dfs",
				"fqdns": [
					"leonly.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--sftp-workspace3')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Synapse/workspaces/sftp-workspace3",
				"groupId": "sql",
				"fqdns": [
					"sftp-workspace3.6cbd8225-6f9c-494e-a2bc-40b3dba84cd3.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--sftp-workspace3')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/750575ff-ab82-4fa7-9a62-b7052fd86473/resourceGroups/test-sftp_group/providers/Microsoft.Synapse/workspaces/sftp-workspace3",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"sftp-workspace3-ondemand.6cbd8225-6f9c-494e-a2bc-40b3dba84cd3.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}